name: Build Flutter Apps

on:
  push:
    branches: [main]
    paths:
      - 'app/**'
      - '.github/workflows/build-flutter.yml'
  pull_request:
    branches: [main]
    paths:
      - 'app/**'
  workflow_dispatch:
    inputs:
      build_android:
        description: 'Build Android APK'
        required: false
        default: true
        type: boolean
      build_ios:
        description: 'Build iOS IPA'
        required: false
        default: true
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        working-directory: ./app
        run: flutter pub get
      
      - name: Analyze code
        working-directory: ./app
        run: flutter analyze
      
      - name: Run tests
        working-directory: ./app
        run: flutter test --coverage
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./app/coverage/lcov.info
          flags: flutter
          name: flutter-coverage

  build-android:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.build_android == 'true'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'
          cache: true
      
      - name: Configure Keystore
        working-directory: ./app/android
        env:
          ANDROID_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo "$ANDROID_KEYSTORE" | base64 --decode > app/keystore.jks
          echo "storePassword=$KEYSTORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEY_PASSWORD" >> key.properties
          echo "keyAlias=$KEY_ALIAS" >> key.properties
          echo "storeFile=keystore.jks" >> key.properties
      
      - name: Install dependencies
        working-directory: ./app
        run: flutter pub get
      
      - name: Build APK
        working-directory: ./app
        run: flutter build apk --release --split-per-abi
      
      - name: Build App Bundle
        working-directory: ./app
        run: flutter build appbundle --release
      
      - name: Upload APK artifacts
        uses: actions/upload-artifact@v3
        with:
          name: android-apk
          path: |
            app/build/app/outputs/flutter-apk/*.apk
          retention-days: 7
      
      - name: Upload App Bundle
        uses: actions/upload-artifact@v3
        with:
          name: android-bundle
          path: app/build/app/outputs/bundle/release/*.aab
          retention-days: 7
      
      - name: Upload to Google Play (Beta)
        if: github.ref == 'refs/heads/main'
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: com.ufobeep.app
          releaseFiles: app/build/app/outputs/bundle/release/*.aab
          track: beta
          inAppUpdatePriority: 2
          status: draft
        continue-on-error: true

  build-ios:
    needs: test
    runs-on: macos-latest
    if: github.event_name == 'push' || github.event.inputs.build_ios == 'true'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'
          cache: true
      
      - name: Install Apple Certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate and provisioning profile
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      
      - name: Install dependencies
        working-directory: ./app
        run: |
          flutter pub get
          cd ios && pod install
      
      - name: Build iOS
        working-directory: ./app
        run: flutter build ipa --release --export-options-plist=ios/ExportOptions.plist
      
      - name: Upload IPA
        uses: actions/upload-artifact@v3
        with:
          name: ios-ipa
          path: app/build/ios/ipa/*.ipa
          retention-days: 7
      
      - name: Upload to TestFlight
        if: github.ref == 'refs/heads/main'
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          xcrun altool --upload-app \
            --type ios \
            --file app/build/ios/ipa/*.ipa \
            --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
            --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID"
        continue-on-error: true
      
      - name: Clean up keychain
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm -f ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  release:
    needs: [build-android, build-ios]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release Build ${{ github.run_number }}
          draft: true
          prerelease: true
          files: |
            artifacts/android-apk/*.apk
            artifacts/android-bundle/*.aab
            artifacts/ios-ipa/*.ipa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}