name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'smoke'
        type: choice
        options:
        - smoke
        - critical
        - acceptance  
        - visual
        - mobile
        - i18n
        - full
      browser:
        description: 'Browser to test'
        required: true
        default: 'chromium'
        type: choice
        options:
        - chromium
        - firefox
        - webkit
        - mobile-chrome
        - mobile-safari
        - all

jobs:
  e2e-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: ufobeep_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          web/package-lock.json
          e2e/package-lock.json

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: api/requirements*.txt

    - name: Install API dependencies
      working-directory: ./api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Install Web dependencies
      working-directory: ./web
      run: npm ci

    - name: Install E2E dependencies
      working-directory: ./e2e
      run: npm ci

    - name: Install Playwright Browsers
      working-directory: ./e2e
      run: npx playwright install --with-deps ${{ matrix.browser }}

    - name: Setup test environment
      run: |
        cp .env.example .env.test
        echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/ufobeep_test" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "ENVIRONMENT=test" >> .env.test
        echo "SECRET_KEY=test-secret-key-for-ci" >> .env.test

    - name: Run database migrations
      working-directory: ./api
      run: |
        python -m alembic upgrade head
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/ufobeep_test

    - name: Build Next.js application
      working-directory: ./web
      run: npm run build
      env:
        NODE_ENV: production

    - name: Start API server
      working-directory: ./api
      run: |
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/ufobeep_test
        REDIS_URL: redis://localhost:6379

    - name: Start Web server  
      working-directory: ./web
      run: |
        npm run start &
        sleep 15
      env:
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: http://localhost:8000

    - name: Wait for servers to be ready
      run: |
        # Wait for API
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        # Wait for Web
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

    - name: Run E2E tests
      working-directory: ./e2e
      run: |
        TEST_TYPE=${{ github.event.inputs.test_type || 'smoke' }}
        BROWSER=${{ github.event.inputs.browser || matrix.browser }}
        ./scripts/run-tests.sh $TEST_TYPE
      env:
        CI: true
        BASE_URL: http://localhost:3000
        API_URL: http://localhost:8000
        BROWSER: ${{ matrix.browser }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.browser }}
        path: |
          e2e/reports/
          e2e/test-results/
        retention-days: 7

    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4  
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}
        path: e2e/reports/html/
        retention-days: 7

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: E2E Tests (${{ matrix.browser }})
        path: e2e/reports/junit/results.xml
        reporter: java-junit
        fail-on-error: false

    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const fs = require('fs');
          const path = 'e2e/reports/summary.md';
          
          if (fs.existsSync(path)) {
            const summary = fs.readFileSync(path, 'utf8');
            const body = `## ðŸ§ª E2E Test Results (${{ matrix.browser }})\n\n${summary}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }

  mobile-tests:
    timeout-minutes: 45
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'mobile' || github.event.inputs.test_type == 'full' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      working-directory: ./e2e
      run: npm ci

    - name: Install Playwright mobile browsers
      working-directory: ./e2e
      run: npx playwright install --with-deps chromium webkit

    - name: Run mobile E2E tests
      working-directory: ./e2e
      run: ./scripts/run-tests.sh mobile
      env:
        CI: true
        BASE_URL: http://localhost:3000

    - name: Upload mobile test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mobile-test-results
        path: e2e/reports/
        retention-days: 7

  visual-regression:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'visual' || github.event.inputs.test_type == 'full'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      working-directory: ./e2e
      run: npm ci

    - name: Install Playwright
      working-directory: ./e2e  
      run: npx playwright install --with-deps chromium

    - name: Run visual regression tests
      working-directory: ./e2e
      run: ./scripts/run-tests.sh visual
      env:
        CI: true
        BASE_URL: http://localhost:3000

    - name: Upload visual test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: visual-test-results
        path: |
          e2e/reports/
          e2e/test-results/
        retention-days: 7

  merge-reports:
    needs: [e2e-tests, mobile-tests, visual-regression]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Download all test artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Install Playwright
      run: npm install @playwright/test

    - name: Merge HTML reports
      run: |
        npx playwright merge-reports --reporter html --config e2e/playwright.config.ts artifacts/*/reports/
      
    - name: Upload merged report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: merged-test-report
        path: playwright-report/
        retention-days: 14

    - name: Deploy report to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: playwright-report/
        destination_dir: e2e-reports/latest