name: Build and Deploy iOS to TestFlight

on:
  workflow_dispatch:
    inputs:
      release_notes:
        description: 'Release notes for TestFlight'
        required: false
        default: 'New beta build with latest features'
        type: string

jobs:
  build-ios:
    runs-on: macos-14
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
        
    - name: Install dependencies
      working-directory: app
      run: flutter pub get
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'
        
    - name: Import certificates and provisioning profiles
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # Import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # Apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        
    - name: Build iOS app
      working-directory: app
      run: |
        flutter build ios --release --no-codesign
        
    - name: Build and archive with Xcode
      working-directory: app/ios
      env:
        CODE_SIGNING_REQUIRED: "YES"
        DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
      run: |
        xcodebuild -workspace Runner.xcworkspace \
                   -scheme Runner \
                   -configuration Release \
                   -destination generic/platform=iOS \
                   -archivePath $RUNNER_TEMP/Runner.xcarchive \
                   archive
                   
    - name: Export IPA
      env:
        EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
      run: |
        EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
        echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
        xcodebuild -exportArchive \
                   -archivePath $RUNNER_TEMP/Runner.xcarchive \
                   -exportPath $RUNNER_TEMP/build \
                   -exportOptionsPlist $EXPORT_OPTS_PATH
                   
    - name: Upload to TestFlight
      env:
        API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
        API_ISSUER_ID: ${{ secrets.APPSTORE_API_ISSUER_ID }}
        API_PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
      run: |
        # Save API key
        mkdir -p ~/.appstoreconnect/private_keys/
        echo -n "$API_PRIVATE_KEY" | base64 --decode -o ~/.appstoreconnect/private_keys/AuthKey_$API_KEY_ID.p8
        
        # Find the IPA file
        IPA_PATH=$(find $RUNNER_TEMP/build -name "*.ipa" | head -1)
        
        # Upload to TestFlight
        xcrun altool --upload-app \
                     --type ios \
                     --file "$IPA_PATH" \
                     --apiKey $API_KEY_ID \
                     --apiIssuer $API_ISSUER_ID \
                     --verbose
                     
    - name: Clean up keychain
      if: always()
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
        
    - name: Notify success
      if: success()
      run: |
        echo "ðŸŽ‰ iOS app successfully uploaded to TestFlight!"
        echo "ðŸ“± Testers will receive notifications in TestFlight app"
        echo "ðŸ”— Check status: https://appstoreconnect.apple.com/apps/testflight"